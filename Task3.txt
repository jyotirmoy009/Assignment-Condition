Q3. What are loops, and what do we need them? Explain different types of loops with their syntax and 
examples.

Ans: A loop is a fundamental programming idea that allows us to execute a block of code repeatedly under specific conditions. 
Loops are handy when we need to conduct the same operation numerous times, such as iterating over an array, processing a list of objects,
or repeating running a job until a condition is fulfilled. 

We need Loops for - 
1. Efficiency: Loops are efficient because they automate repetitive activities.
2. Code Reduction: Instead of writing the same code numerous times, loops allow us to write it once and run it as many times as necessary.
3. Dynamic Behavior: Loops enable us to operate with data structures (such as arrays or objects) dynamically, making our code more flexible and adaptive to changing inputs.


Types of Loops in JavaScript
JavaScript provides several types of loops. Below are the most common ones:

1. For Loop
The for loop is used when the number of iterations is known ahead of time.

Syntax:
for (initialization; condition; increment/decrement) {
    // Code to be executed
}

Example:
for (let i = 0; i < 5; i++) {
    console.log(i);  // Output: 0, 1, 2, 3, 4
}
Explanation: The loop runs while i is less than 5. It starts with i = 0, then increments by 1 after each iteration.



2. While Loop
The while loop is used when the number of iterations is not known, but we want to repeat the code as long as a condition is true.

Syntax:
while (condition) {
    // Code to be executed
}

Example:
let i = 0;
while (i < 5) {
    console.log(i);  // Output: 0, 1, 2, 3, 4
    i++;
}
Explanation: The loop continues as long as i is less than 5. The value of i is incremented inside the loop.



3. Do...While Loop
The do...while loop is similar to the while loop, except that it guarantees at least one execution of the code block, even if the condition is false.

Syntax:
do {
    // Code to be executed
} while (condition);

Example:
let i = 0;
do {
    console.log(i);  // Output: 0, 1, 2, 3, 4
    i++;
} while (i < 5);
Explanation: The code block runs at least once, regardless of the value of i at the start. The loop condition is checked after the first execution.



4. For...In Loop
The for...in loop is used to iterate over the keys of an object or the indices of an array. It is often used with objects.

Syntax:
for (key in object) {
    // Code to be executed
}
key: The variable that holds the current key (or index).
object: The object or array whose properties (or elements) you're iterating over.

Example (with an object):
const person = {
    name: "Duke",
    age: 25,
    job: "Developer"
};

for (let key in person) {
    console.log(key + ": " + person[key]);
}
// Output:
// name: Duke
// age: 25
// job: Developer
Explanation: The loop iterates over each property or index of the object/array.



5. For...Of Loop
The for...of loop is used to iterate over the values of iterable objects like arrays, strings, or NodeLists.

Syntax:
for (let value of iterable) {
    // Code to be executed
}
iterable: An object that is iterable (such as an array, string, or Set).
value: The variable that holds the current value of the iterable during each iteration.

Example (with an array):
const fruits = ["apple", "banana", "cherry"];

for (let fruit of fruits) {
    console.log(fruit);  // Output: apple, banana, cherry
}

Example (with a string):
const str = "Hello";

for (let char of str) {
    console.log(char);  // Output: H, e, l, l, o
}
Explanation: The loop iterates over the actual values in the iterable (not the indices like for...in).
